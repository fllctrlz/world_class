Square Up to Line
-----------------

Let "n2” be Start Power” / “Direction”
Reset Timer 1
Begin Loop
         Read Timer 1 to “Current Time”
         Set “Current Power” to “n2” x “Current Time” – “Start Power”
         Read light sensor 3 into “Light C”
         If “Light C” less than “Light Target” 
                   Set the power of motor C to “Current power” x “n1”
         Else
                   Set the power of motor C to minus “Current power” x “n1”
         Read light sensor 4 into “Light B”
         If “Light B” less than “Light Target” 
                   Set the power of motor B to “Current power” x “n1”
         Else
                   Set the power of motor B to minus “Current power” x “n1”
End Loop when “Current Time” becomes bigger than “Duration”

 
Error Corrected Move Block  
--------------------------

Let “CurrentPower” = “StartPower”
Let “Accelerating” = true
Let “Decelerating” = false
Let “InitBMove”= Motor B rotational sensor reading
Let “InitCMove”= Motor C rotational sensor reading

Begin Loop
	If “Accelerating” equals true
		Let “CurrentPower”= “CurrentPower” + “KUp
	If “CurrentPower” is greater or equal to “TargetPower”
		Let “Accelerating” = false
	If “SlowDownDistance” is less than or equal to the absolute value of (Motor B rotational sensor reading – “InitBMove” )
		Let “Decelerating” = true
	If “Decelerating” equals true	
		Let “temp”= “CurrentPower” – “KDown”
		If “temp” is greater than or equal to “EndPower”
			Let “CurrentPower” = “temp”
	If “CurrentPower” is less than or equal to “EndPower”
		Let “Decelerating”= false
	Let “DistanceC” = absolute value of ( Motor C rotational sensor reading – “InitCMove” )	
	Let “DistanceB” = absolute value of ( Motor B rotational sensor reading – “InitBMove” )
	Let “DistanceError” = “DistanceC” x “turn” – “DistanceB”
	Let “PowerC” = “CurrentPower” – ( “Distanceerror” x “KWiggle” )
	Let “PowerB” = ( “CurrentPower” x “turn” ) + ( “Distanceerror” x “KWiggle” )
	If “Forward” is true
		Set the power of motor C to “PowerC”
		Set the power or motor B to “PowerB”
	Else
		Set the power of motor C to ( “PowerC” x -1 )
		Set the power of motor B to ( “PowerB” x -1 )
End Loop
 
 
Proportional Integral Derivative Line Follow
--------------------------------------------

Let “Kp” = some number
Let “Ki” = some number
Let “Kd” = some number
Let “Offset” = 500
Let “Tp” (target power) = some power level between 50 and 100
Let “Integral” = 0
Let “Derivative” = 0
Let “Last Error” = 0
Reset rotation sensor B and C
Begin Loop
	Let “Error” = light sensor intensity reading – (minus) “Offset”
	Let “Integral” = “Error” + (plus) “Integral”
	Let “Derivative” = “Error” – (minus) “Last Error”
	Let “PTerm” = “Kp” x (times) “Error”
	Let “ITerm” = “Ki” x (times) “Integral”
	Let “DTerm” = “Kd” x (times) “Derivative”
	Let “Turn” = “PTerm” + “ITerm” + “DTerm”
	Let “Turn” = Turn / (divided by) 100
	Let “PowerB” = “Tp” + (plus) “Turn”
	Let “PowerC” = “Tp” - (minus) “Turn”
	Let “LastError” = “Error”
	Ensure “PowerB” is between 0 and 100
	En’sure “PowerC” is between 0 and 100
	If “Follow on left side” 
		If forward direction
			Apply “Power B” to motor B
			Apply “Power C” to motor C
	Else
			Apply (minus) “Power B” to motor B
			Apply (minus) “Power C” to motor C
	Else
		If forward direction
			Apply “Power B” to motor C
			Apply “Power C” to motor B
		Else
			Apply (minus) “Power B” to motor C
			Apply (minus) “Power C” to motor B
End Loop
Stop Motors C and B

 